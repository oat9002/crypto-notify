package contracts.pancake;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MasterChefV2 extends Contract {
    public static final String BINARY = "60e06040526495e27d7580600a55640ea1fc81ce600b556444502b18b2600c553480156200002c57600080fd5b5060405162003cf638038062003cf68339810160408190526200004f91620000f3565b60006200005b620000ef565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055606093841b6001600160601b03199081166080529290931b90911660a05260c052600280546001600160a01b0319166001600160a01b0390921691909117905562000167565b3390565b6000806000806080858703121562000109578384fd5b845162000116816200014e565b602086015190945062000129816200014e565b60408601516060870151919450925062000143816200014e565b939692955090935050565b6001600160a01b03811681146200016457600080fd5b50565b60805160601c60a05160601c60c051613b2f620001c760003980610f4e5280611307528061166452508061127b5280611ec65280612b215280612bf45280612ca1525080610e675280610f2152806112da52806126be5250613b2f6000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80637398b7ea11610191578063ac1d0609116100e3578063dfcedeee11610097578063e39e132311610071578063e39e13231461052b578063edd8b17014610569578063f2fde38b14610571576102e9565b8063dfcedeee14610546578063e0f91f6c1461054e578063e2bbb15814610556576102e9565b8063c507aeaa116100c8578063c507aeaa14610518578063cc6db2da1461052b578063dc6363df14610533576102e9565b8063ac1d0609146104fd578063c40d337b14610510576102e9565b80638da5cb5b116101455780639dcc1b5f1161011f5780639dcc1b5f146104da5780639dd2fcc3146104e2578063aa47bc8e146104f5576102e9565b80638da5cb5b146104a857806393f1a40b146104b057806399d7e84a146104d2576102e9565b806378db4c341161017657806378db4c341461048557806378ed5d1f1461048d57806381bdf98c146104a0576102e9565b80637398b7ea1461046a578063777a97f814610472576102e9565b806339aae5ba1161024a5780635312ea8e116101fe57806364482f79116101d857806364482f791461044757806369b021281461045a578063715018a614610462576102e9565b80635312ea8e1461042457806361621aaa14610437578063630b5ba11461043f576102e9565b80634ca6ef281161022f5780634ca6ef28146103e75780634f70b15a146103fc57806351eb05a614610404576102e9565b806339aae5ba146103cc578063441a3e70146103d4576102e9565b80631526fe27116102a15780631ce06d57116102865780631ce06d57146103915780631e9b828b14610399578063372c12b1146103ac576102e9565b80631526fe271461035a57806319ab453c1461037e576102e9565b8063081e3eda116102d2578063081e3eda1461032c5780630bb844bc146103345780631175a1dd14610347576102e9565b8063033186e8146102ee578063041a84c914610317575b600080fd5b6103016102fc366004612fdd565b610584565b60405161030e9190613a38565b60405180910390f35b61032a610325366004613008565b6105da565b005b610301610952565b61032a610342366004612f89565b610958565b6103016103553660046130a4565b610acd565b61036d610368366004613074565b610c80565b60405161030e959493929190613a75565b61032a61038c366004612f89565b610cc1565b610301610fdb565b6103016103a736600461303c565b610fe1565b6103bf6103ba366004612f89565b611046565b60405161030e919061323c565b61030161105b565b61032a6103e236600461311a565b611068565b6103ef611279565b60405161030e91906131c4565b61032a61129d565b610417610412366004613074565b611366565b60405161030e91906139fc565b61032a610432366004613074565b611534565b610301611662565b61032a611686565b61032a61045536600461313b565b61171a565b610301611891565b61032a61189b565b610301611966565b61032a61048036600461303c565b611972565b610301611a38565b6103ef61049b366004613074565b611a3e565b6103ef611a72565b6103ef611a8e565b6104c36104be3660046130a4565b611aaa565b60405161030e93929190613a5f565b610301611ad6565b610301611adc565b61032a6104f0366004612f89565b611b0a565b610301611c4b565b61032a61050b366004612fa5565b611c51565b610301611d85565b61032a6105263660046130c8565b611d8b565b610301612164565b61032a610541366004613173565b61216d565b6103ef6122cf565b6103016122eb565b61032a61056436600461311a565b6122f1565b6103ef6126bc565b61032a61057f366004612f89565b6126e0565b600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281206002015464e8d4a5100081116105ce5764e8d4a510006105d0565b805b9150505b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136dd565b60405180910390fd5b60026001541415610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906138e5565b600260015573ffffffffffffffffffffffffffffffffffffffff83166106c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613443565b600482815481106106d057fe5b600091825260209091206004600590920201015460ff1661071d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613797565b64e8d4a51000811015801561073857506501d1a94a20008111155b61076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906132f5565b610776612f37565b61077f83611366565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8916845290915281209192506107bb8686610584565b90506107c8868683612816565b610808670de0b6b3a76400006107fc856000015161080264e8d4a510006107fc8a89600001546128f390919063ffffffff16565b90612947565b906128f3565b60018301558154610854906108289064e8d4a51000906107fc90886128f3565b835461084e906108439064e8d4a51000906107fc90876128f3565b606087015190612990565b906129d2565b6060840152600480548491908790811061086a57fe5b6000918252602080832084516005939093020191825583810151600183015560408085015160028085019190915560608601516003850155608090950151600490930180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092558883526006815281832073ffffffffffffffffffffffffffffffffffffffff8b1680855291529181902090920186905590517f01abd62439b64f6c5dab6f94d56099495bd0c094f9c21f98f4d3562a21edb4ba9061093e90889085908990613a5f565b60405180910390a250506001805550505050565b60045490565b610960612a11565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146109b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b73ffffffffffffffffffffffffffffffffffffffff8116610a01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906134a0565b60025473ffffffffffffffffffffffffffffffffffffffff82811691161415610a56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061391c565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907fd146fe330fdddf682413850a35b28edfccd4c4b53cfee802fd24950de5be1dbe90600090a35050565b6000610ad7612f37565b60048481548110610ae457fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301939093526002830154908201526003820154606082015260049091015460ff16151560808201529050610b3e612f68565b50600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845282529182902082516060808201855282548252600183015482850152600290920154938101939093528351908401519184015190919043118015610bac57508015155b15610c2c576000610bca85602001514361299090919063ffffffff16565b90506000610c058660800151610be257600954610be6565b6008545b6107fc8860400151610802610bfe8b60800151610fe1565b87906128f3565b9050610c27610c20846107fc84670de0b6b3a76400006128f3565b85906129d2565b935050505b6000610c4c64e8d4a510006107fc610c448a8c610584565b8751906128f3565b6020850151909150610c7490610c6e670de0b6b3a76400006107fc85886128f3565b90612990565b98975050505050505050565b60048181548110610c8d57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401549294509092909160ff1685565b610cc9612a11565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614610d1d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190610d729033906004016131c4565b60206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc2919061308c565b905080610dfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613298565b610e1d73ffffffffffffffffffffffffffffffffffffffff8316333084612a15565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063095ea7b390610e91907f0000000000000000000000000000000000000000000000000000000000000000908590600401613216565b602060405180830381600087803b158015610eab57600080fd5b505af1158015610ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee39190613058565b506040517fe2bbb15800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e2bbb15890610f78907f0000000000000000000000000000000000000000000000000000000000000000908590600401613a51565b600060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505043600d5550506040517f57a86f7d14ccde89e22870afe839e3011216827daa9b24e18629f0a1e9d6cc1490600090a15050565b600c5481565b600081156110175761101064e8d4a510006107fc600b5468022b1c8c1227a000006128f390919063ffffffff16565b9050611041565b61103e64e8d4a510006107fc600c5468022b1c8c1227a000006128f390919063ffffffff16565b90505b919050565b60076020526000908152604090205460ff1681565b68022b1c8c1227a0000081565b600260015414156110a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906138e5565b60026001556110b2612f37565b6110bb83611366565b60008481526006602090815260408083203384529091529020805491925090831115611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061363a565b600061111f3386610584565b905061112c338683612816565b831561118157815461113e9085612990565b826000018190555061118133856005888154811061115857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169190612ab8565b6111b5670de0b6b3a76400006107fc856000015161080264e8d4a510006107fc8789600001546128f390919063ffffffff16565b60018301556111fd6111d064e8d4a510006107fc87856128f3565b600487815481106111dd57fe5b90600052602060002090600502016003015461299090919063ffffffff16565b6004868154811061120a57fe5b906000526020600020906005020160030181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568866040516112669190613a38565b60405180910390a3505060018055505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fe2bbb15800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e2bbb15890611332907f000000000000000000000000000000000000000000000000000000000000000090600090600401613a51565b600060405180830381600087803b15801561134c57600080fd5b505af1158015611360573d6000803e3d6000fd5b50505050565b61136e612f37565b6004828154811061137b57fe5b60009182526020918290206040805160a0810182526005909302909101805483526001810154938301849052600281015491830191909152600381015460608301526004015460ff1615156080820152915043111561104157606081015160808201516000906113ed576009546113f1565b6008545b90506000821180156114035750600081115b1561146957600061142184602001514361299090919063ffffffff16565b90506000611441836107fc8760400151610802610bfe8a60800151610fe1565b905061146461145c856107fc84670de0b6b3a76400006128f3565b8651906129d2565b855250505b436020840152600480548491908690811061148057fe5b6000918252602091829020835160059290920201908155828201516001820155604080840151600283015560608401516003830155608090930151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558401518451915186927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f46926115259290918791613a5f565b60405180910390a25050919050565b60026001541415611571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906138e5565b600260018190555060006004828154811061158857fe5b6000918252602080832085845260068252604080852033808752935284208054858255600182018690556005909402909101945092906115de9064e8d4a51000906107fc906115d79089610584565b85906128f3565b9050808460030154116115f2576000611601565b60038401546116019082612990565b846003018190555061161b33836005888154811061115857fe5b843373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae0595846040516112669190613a38565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045460005b818110156117165761169c612f37565b600482815481106116a957fe5b60009182526020918290206040805160a08101825260059093029091018054835260018101549383019390935260028301549082018190526003830154606083015260049092015460ff161515608082015291501561170d5761170b82611366565b505b5060010161168c565b5050565b611722612a11565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b61177f83611366565b50801561178e5761178e611686565b6004838154811061179b57fe5b600091825260209091206004600590920201015460ff16156117f6576117ee8261084e600486815481106117cb57fe5b90600052602060002090600502016002015460085461299090919063ffffffff16565b600855611831565b61182d8261084e6004868154811061180a57fe5b90600052602060002090600502016002015460095461299090919063ffffffff16565b6009555b816004848154811061183f57fe5b906000526020600020906005020160020181905550827fc0cfd54d2de2b55f1e6e108d3ec53ff0a1abe6055401d32c61e9433b747ef9f8836040516118849190613a38565b60405180910390a2505050565b6501d1a94a200081565b6118a3612a11565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146118f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b670de0b6b3a764000081565b61197a612a11565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146119ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b80156119dc576119dc611686565b60006119f3600d544361299090919063ffffffff16565b90506000611a09611a02611adc565b83906128f3565b600254909150611a2f9073ffffffffffffffffffffffffffffffffffffffff1682612adc565b505043600d5550565b600d5481565b60058181548110611a4b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600660209081526000928352604080842090915290825290208054600182015460029092015490919083565b60095481565b6000611b0564e8d4a510006107fc600a5468022b1c8c1227a000006128f390919063ffffffff16565b905090565b611b12612a11565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611b66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b73ffffffffffffffffffffffffffffffffffffffff811615801590611ba6575060035473ffffffffffffffffffffffffffffffffffffffff828116911614155b611bdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061399f565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f4c0c07d0b548b824a1b998eb4d11fccf1cfbc1e47edcdb309970ba88315eb30390600090a250565b600b5481565b611c59612a11565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b73ffffffffffffffffffffffffffffffffffffffff8216611cfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906137f4565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600760205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016841515179055517fc551bbb22d0406dbfb8b6b7740cc521bcf44e1106029cf899c19b6a8e4c99d5190611d7990849061323c565b60405180910390a25050565b60085481565b611d93612a11565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611de7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190611e3c9030906004016131c4565b60206040518083038186803b158015611e5457600080fd5b505afa158015611e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8c919061308c565b1015611ec4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613671565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061373a565b8015611f5857611f58611686565b8115611f7357600854611f6b90856129d2565b600855611f84565b600954611f8090856129d2565b6009555b60058054600180820183557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091556040805160a081018252600080825243602083019081529282018a8152606083018281528915156080850190815260048054808a018255945293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9389029384015593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d82015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f90910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055915461212591612990565b7f18caa0724a26384928efe604ae6ddc99c242548876259770fc88fcb7e719d8fa8685604051612156929190613a41565b60405180910390a350505050565b64e8d4a5100081565b612175612a11565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146121c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b6000841180156121d95750600083115b80156121e55750600082115b61221b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906134fd565b64e8d4a5100061222f8361084e87876129d2565b14612266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613888565b801561227457612274611686565b61227e6000611972565b600a849055600b839055600c8290556040517fae2d2e7d1ae84564fc72227253ce0f36a007209f7fd5ec414dea80e5af2fb5b0906122c190869086908690613a5f565b60405180910390a150505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6002600154141561232e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906138e5565b600260015561233b612f37565b61234483611366565b600084815260066020908152604080832033845290915290206080820151919250908061238057503360009081526007602052604090205460ff165b6123b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061355a565b60006123c23386610584565b8254909150156123d7576123d7338683612816565b83156125d3576000600586815481106123ec57fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a082319061244b9030906004016131c4565b60206040518083038186803b15801561246357600080fd5b505afa158015612477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249b919061308c565b90506124da33308760058a815481106124b057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16929190612a15565b61259a81600588815481106124eb57fe5b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906370a082319061254a9030906004016131c4565b60206040518083038186803b15801561256257600080fd5b505afa158015612576573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e919061308c565b83549095506125a990866129d2565b83556125cc6125c164e8d4a510006107fc88866128f3565b6060860151906129d2565b6060850152505b612607670de0b6b3a76400006107fc856000015161080264e8d4a510006107fc8789600001546128f390919063ffffffff16565b8260010181905550826004868154811061261d57fe5b6000918252602091829020835160059290920201908155908201516001820155604080830151600283015560608301516003830155608090920151600490910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905551859033907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1590611266908890613a38565b7f000000000000000000000000000000000000000000000000000000000000000081565b6126e8612a11565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461273c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906136a8565b73ffffffffffffffffffffffffffffffffffffffff8116612789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906133af565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61281e612f68565b50600082815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845282528083208151606081018352815480825260018301549482019490945260029091015491810191909152919061288b9064e8d4a51000906107fc90866128f3565b905060006128c3670de0b6b3a76400006107fc600488815481106128ab57fe5b600091825260209091206005909102015485906128f3565b905060006128de84602001518361299090919063ffffffff16565b90506128ea8782612adc565b50505050505050565b600082612902575060006105d4565b8282028284828161290f57fe5b04146105ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b906135dd565b600061298983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612cc8565b9392505050565b600061298983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612d19565b6000828201838110156105ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9061340c565b3390565b611360846323b872dd60e01b858585604051602401612a36939291906131e5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612d5f565b612ad78363a9059cbb60e01b8484604051602401612a36929190613216565b505050565b8015611716576040517f70a08231000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612b569030906004016131c4565b60206040518083038186803b158015612b6e57600080fd5b505afa158015612b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba6919061308c565b1015612bb457612bb461129d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612c299030906004016131c4565b60206040518083038186803b158015612c4157600080fd5b505afa158015612c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c79919061308c565b905081811015612c87578091505b612ad773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168484612ab8565b60008183612d03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613247565b506000838581612d0f57fe5b0495945050505050565b60008184841115612d57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613247565b505050900390565b6060612dc1826040518060400160405280602081526020017f5361666542455032303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612e159092919063ffffffff16565b805190915015612ad75780806020019051810190612ddf9190613058565b612ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613352565b6060612e248484600085612e2c565b949350505050565b6060612e3785612f31565b612e6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613851565b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051612e9791906131a8565b60006040518083038185875af1925050503d8060008114612ed4576040519150601f19603f3d011682016040523d82523d6000602084013e612ed9565b606091505b50915091508115612eed579150612e249050565b805115612efd5780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b9190613247565b3b151590565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215612f9a578081fd5b81356105ce81613ac6565b60008060408385031215612fb7578081fd5b8235612fc281613ac6565b91506020830135612fd281613aeb565b809150509250929050565b60008060408385031215612fef578182fd5b8235612ffa81613ac6565b946020939093013593505050565b60008060006060848603121561301c578081fd5b833561302781613ac6565b95602085013595506040909401359392505050565b60006020828403121561304d578081fd5b81356105ce81613aeb565b600060208284031215613069578081fd5b81516105ce81613aeb565b600060208284031215613085578081fd5b5035919050565b60006020828403121561309d578081fd5b5051919050565b600080604083850312156130b6578182fd5b823591506020830135612fd281613ac6565b600080600080608085870312156130dd578081fd5b8435935060208501356130ef81613ac6565b925060408501356130ff81613aeb565b9150606085013561310f81613aeb565b939692955090935050565b6000806040838503121561312c578182fd5b50508035926020909101359150565b60008060006060848603121561314f578283fd5b8335925060208401359150604084013561316881613aeb565b809150509250925092565b60008060008060808587031215613188578384fd5b843593506020850135925060408501359150606085013561310f81613aeb565b600082516131ba818460208701613a9a565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152613266816040850160208701613a9a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526023908201527f4d61737465724368656656323a2042616c616e6365206d75737420657863656560408201527f6420300000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4d61737465724368656656323a20496e76616c6964206e657720626f6f73742060408201527f6d756c7469706c69657200000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666542455032303a204245503230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602c908201527f4d61737465724368656656323a2054686520757365722061646472657373206d60408201527f7573742062652076616c69640000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206d7573742062652076616c6964000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f4d61737465724368656656323a2043616b652072617465206d7573742062652060408201527f67726561746572207468616e2030000000000000000000000000000000000000606082015260800190565b60208082526042908201527f4d61737465724368656656323a205468652061646472657373206973206e6f7460408201527f20617661696c61626c6520746f206465706f73697420696e207468697320706f60608201527f6f6c000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526016908201527f77697468647261773a20496e73756666696369656e7400000000000000000000604082015260600190565b60208082526011908201527f4e6f6e6520424550323020746f6b656e73000000000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4f776e61626c653a2063616c6c6572206973206e6f742074686520626f6f737460408201527f20636f6e74726163740000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f43414b4520746f6b656e2063616e277420626520616464656420746f2066617260408201527f6d20706f6f6c7300000000000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f4d61737465724368656656323a204f6e6c7920726567756c6172206661726d2060408201527f636f756c6420626520626f6f7374656400000000000000000000000000000000606082015260800190565b60208082526032908201527f4d61737465724368656656323a20546865207768697465206c6973742061646460408201527f72657373206d7573742062652076616c69640000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526025908201527f4d61737465724368656656323a20546f74616c2072617465206d75737420626560408201527f2031653132000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526041908201527f4d61737465724368656656323a204275726e2061646d696e206164647265737360408201527f206973207468652073616d6520776974682063757272656e742061646472657360608201527f7300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526036908201527f4d61737465724368656656323a204e657720626f6f737420636f6e747261637460408201527f2061646472657373206d7573742062652076616c696400000000000000000000606082015260800190565b600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9485526020850193909352604084019190915260608301521515608082015260a00190565b60005b83811015613ab5578181015183820152602001613a9d565b838111156113605750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114613ae857600080fd5b50565b8015158114613ae857600080fdfea2646970667358221220ac0ba07a247c72013b8d13fedbac6432b0e00545e01f707d0146ff30f9603d2564736f6c634300060c003300000000000000000000000073feaa1ee314f8c655e354234017be2193c9e24e0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000000000000000000000000000000000000000020e0000000000000000000000001a5238878b2c138b9dcce2ea6be9cf7e9f12cf6a\n"
            + "\n";

    public static final String FUNC_ACC_CAKE_PRECISION = "ACC_CAKE_PRECISION";

    public static final String FUNC_BOOST_PRECISION = "BOOST_PRECISION";

    public static final String FUNC_CAKE = "CAKE";

    public static final String FUNC_CAKE_RATE_TOTAL_PRECISION = "CAKE_RATE_TOTAL_PRECISION";

    public static final String FUNC_MASTERCHEF_CAKE_PER_BLOCK = "MASTERCHEF_CAKE_PER_BLOCK";

    public static final String FUNC_MASTER_CHEF = "MASTER_CHEF";

    public static final String FUNC_MASTER_PID = "MASTER_PID";

    public static final String FUNC_MAX_BOOST_PRECISION = "MAX_BOOST_PRECISION";

    public static final String FUNC_ADD = "add";

    public static final String FUNC_BOOSTCONTRACT = "boostContract";

    public static final String FUNC_BURNADMIN = "burnAdmin";

    public static final String FUNC_BURNCAKE = "burnCake";

    public static final String FUNC_CAKEPERBLOCK = "cakePerBlock";

    public static final String FUNC_CAKEPERBLOCKTOBURN = "cakePerBlockToBurn";

    public static final String FUNC_CAKERATETOBURN = "cakeRateToBurn";

    public static final String FUNC_CAKERATETOREGULARFARM = "cakeRateToRegularFarm";

    public static final String FUNC_CAKERATETOSPECIALFARM = "cakeRateToSpecialFarm";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EMERGENCYWITHDRAW = "emergencyWithdraw";

    public static final String FUNC_GETBOOSTMULTIPLIER = "getBoostMultiplier";

    public static final String FUNC_HARVESTFROMMASTERCHEF = "harvestFromMasterChef";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_LASTBURNEDBLOCK = "lastBurnedBlock";

    public static final String FUNC_LPTOKEN = "lpToken";

    public static final String FUNC_MASSUPDATEPOOLS = "massUpdatePools";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PENDINGCAKE = "pendingCake";

    public static final String FUNC_POOLINFO = "poolInfo";

    public static final String FUNC_POOLLENGTH = "poolLength";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SET = "set";

    public static final String FUNC_TOTALREGULARALLOCPOINT = "totalRegularAllocPoint";

    public static final String FUNC_TOTALSPECIALALLOCPOINT = "totalSpecialAllocPoint";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEBOOSTCONTRACT = "updateBoostContract";

    public static final String FUNC_UPDATEBOOSTMULTIPLIER = "updateBoostMultiplier";

    public static final String FUNC_UPDATEBURNADMIN = "updateBurnAdmin";

    public static final String FUNC_UPDATECAKERATE = "updateCakeRate";

    public static final String FUNC_UPDATEPOOL = "updatePool";

    public static final String FUNC_UPDATEWHITELIST = "updateWhiteList";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_WHITELIST = "whiteList";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event ADDPOOL_EVENT = new Event("AddPool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EMERGENCYWITHDRAW_EVENT = new Event("EmergencyWithdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INIT_EVENT = new Event("Init", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETPOOL_EVENT = new Event("SetPool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEBOOSTCONTRACT_EVENT = new Event("UpdateBoostContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATEBOOSTMULTIPLIER_EVENT = new Event("UpdateBoostMultiplier", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEBURNADMIN_EVENT = new Event("UpdateBurnAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATECAKERATE_EVENT = new Event("UpdateCakeRate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEPOOL_EVENT = new Event("UpdatePool", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEWHITELIST_EVENT = new Event("UpdateWhiteList", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected MasterChefV2(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MasterChefV2(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MasterChefV2(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MasterChefV2(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddPoolEventResponse> getAddPoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDPOOL_EVENT, transactionReceipt);
        ArrayList<AddPoolEventResponse> responses = new ArrayList<AddPoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddPoolEventResponse typedResponse = new AddPoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.lpToken = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.allocPoint = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.isRegular = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddPoolEventResponse> addPoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddPoolEventResponse>() {
            @Override
            public AddPoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDPOOL_EVENT, log);
                AddPoolEventResponse typedResponse = new AddPoolEventResponse();
                typedResponse.log = log;
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.lpToken = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.allocPoint = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.isRegular = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddPoolEventResponse> addPoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDPOOL_EVENT));
        return addPoolEventFlowable(filter);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public List<EmergencyWithdrawEventResponse> getEmergencyWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EMERGENCYWITHDRAW_EVENT, transactionReceipt);
        ArrayList<EmergencyWithdrawEventResponse> responses = new ArrayList<EmergencyWithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EmergencyWithdrawEventResponse typedResponse = new EmergencyWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EmergencyWithdrawEventResponse> emergencyWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EmergencyWithdrawEventResponse>() {
            @Override
            public EmergencyWithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EMERGENCYWITHDRAW_EVENT, log);
                EmergencyWithdrawEventResponse typedResponse = new EmergencyWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EmergencyWithdrawEventResponse> emergencyWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EMERGENCYWITHDRAW_EVENT));
        return emergencyWithdrawEventFlowable(filter);
    }

    public List<InitEventResponse> getInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INIT_EVENT, transactionReceipt);
        ArrayList<InitEventResponse> responses = new ArrayList<InitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitEventResponse typedResponse = new InitEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitEventResponse> initEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitEventResponse>() {
            @Override
            public InitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INIT_EVENT, log);
                InitEventResponse typedResponse = new InitEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<InitEventResponse> initEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INIT_EVENT));
        return initEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SetPoolEventResponse> getSetPoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETPOOL_EVENT, transactionReceipt);
        ArrayList<SetPoolEventResponse> responses = new ArrayList<SetPoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetPoolEventResponse typedResponse = new SetPoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.allocPoint = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetPoolEventResponse> setPoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetPoolEventResponse>() {
            @Override
            public SetPoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETPOOL_EVENT, log);
                SetPoolEventResponse typedResponse = new SetPoolEventResponse();
                typedResponse.log = log;
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.allocPoint = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetPoolEventResponse> setPoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETPOOL_EVENT));
        return setPoolEventFlowable(filter);
    }

    public List<UpdateBoostContractEventResponse> getUpdateBoostContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBOOSTCONTRACT_EVENT, transactionReceipt);
        ArrayList<UpdateBoostContractEventResponse> responses = new ArrayList<UpdateBoostContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateBoostContractEventResponse typedResponse = new UpdateBoostContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.boostContract = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateBoostContractEventResponse> updateBoostContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateBoostContractEventResponse>() {
            @Override
            public UpdateBoostContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEBOOSTCONTRACT_EVENT, log);
                UpdateBoostContractEventResponse typedResponse = new UpdateBoostContractEventResponse();
                typedResponse.log = log;
                typedResponse.boostContract = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateBoostContractEventResponse> updateBoostContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEBOOSTCONTRACT_EVENT));
        return updateBoostContractEventFlowable(filter);
    }

    public List<UpdateBoostMultiplierEventResponse> getUpdateBoostMultiplierEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBOOSTMULTIPLIER_EVENT, transactionReceipt);
        ArrayList<UpdateBoostMultiplierEventResponse> responses = new ArrayList<UpdateBoostMultiplierEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateBoostMultiplierEventResponse typedResponse = new UpdateBoostMultiplierEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.oldMultiplier = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newMultiplier = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateBoostMultiplierEventResponse> updateBoostMultiplierEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateBoostMultiplierEventResponse>() {
            @Override
            public UpdateBoostMultiplierEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEBOOSTMULTIPLIER_EVENT, log);
                UpdateBoostMultiplierEventResponse typedResponse = new UpdateBoostMultiplierEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.oldMultiplier = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newMultiplier = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateBoostMultiplierEventResponse> updateBoostMultiplierEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEBOOSTMULTIPLIER_EVENT));
        return updateBoostMultiplierEventFlowable(filter);
    }

    public List<UpdateBurnAdminEventResponse> getUpdateBurnAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEBURNADMIN_EVENT, transactionReceipt);
        ArrayList<UpdateBurnAdminEventResponse> responses = new ArrayList<UpdateBurnAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateBurnAdminEventResponse typedResponse = new UpdateBurnAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateBurnAdminEventResponse> updateBurnAdminEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateBurnAdminEventResponse>() {
            @Override
            public UpdateBurnAdminEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEBURNADMIN_EVENT, log);
                UpdateBurnAdminEventResponse typedResponse = new UpdateBurnAdminEventResponse();
                typedResponse.log = log;
                typedResponse.oldAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateBurnAdminEventResponse> updateBurnAdminEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEBURNADMIN_EVENT));
        return updateBurnAdminEventFlowable(filter);
    }

    public List<UpdateCakeRateEventResponse> getUpdateCakeRateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATECAKERATE_EVENT, transactionReceipt);
        ArrayList<UpdateCakeRateEventResponse> responses = new ArrayList<UpdateCakeRateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateCakeRateEventResponse typedResponse = new UpdateCakeRateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.burnRate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.regularFarmRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.specialFarmRate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateCakeRateEventResponse> updateCakeRateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateCakeRateEventResponse>() {
            @Override
            public UpdateCakeRateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATECAKERATE_EVENT, log);
                UpdateCakeRateEventResponse typedResponse = new UpdateCakeRateEventResponse();
                typedResponse.log = log;
                typedResponse.burnRate = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.regularFarmRate = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.specialFarmRate = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateCakeRateEventResponse> updateCakeRateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATECAKERATE_EVENT));
        return updateCakeRateEventFlowable(filter);
    }

    public List<UpdatePoolEventResponse> getUpdatePoolEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEPOOL_EVENT, transactionReceipt);
        ArrayList<UpdatePoolEventResponse> responses = new ArrayList<UpdatePoolEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdatePoolEventResponse typedResponse = new UpdatePoolEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.lastRewardBlock = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lpSupply = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.accCakePerShare = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdatePoolEventResponse> updatePoolEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdatePoolEventResponse>() {
            @Override
            public UpdatePoolEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEPOOL_EVENT, log);
                UpdatePoolEventResponse typedResponse = new UpdatePoolEventResponse();
                typedResponse.log = log;
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.lastRewardBlock = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lpSupply = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.accCakePerShare = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdatePoolEventResponse> updatePoolEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEPOOL_EVENT));
        return updatePoolEventFlowable(filter);
    }

    public List<UpdateWhiteListEventResponse> getUpdateWhiteListEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEWHITELIST_EVENT, transactionReceipt);
        ArrayList<UpdateWhiteListEventResponse> responses = new ArrayList<UpdateWhiteListEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateWhiteListEventResponse typedResponse = new UpdateWhiteListEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.isValid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateWhiteListEventResponse> updateWhiteListEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateWhiteListEventResponse>() {
            @Override
            public UpdateWhiteListEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEWHITELIST_EVENT, log);
                UpdateWhiteListEventResponse typedResponse = new UpdateWhiteListEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.isValid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateWhiteListEventResponse> updateWhiteListEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEWHITELIST_EVENT));
        return updateWhiteListEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pid = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> ACC_CAKE_PRECISION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACC_CAKE_PRECISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> BOOST_PRECISION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOOST_PRECISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> CAKE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> CAKE_RATE_TOTAL_PRECISION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKE_RATE_TOTAL_PRECISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MASTERCHEF_CAKE_PER_BLOCK() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASTERCHEF_CAKE_PER_BLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> MASTER_CHEF() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASTER_CHEF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> MASTER_PID() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASTER_PID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_BOOST_PRECISION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_BOOST_PRECISION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> add(BigInteger _allocPoint, String _lpToken, Boolean _isRegular, Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_allocPoint), 
                new org.web3j.abi.datatypes.Address(160, _lpToken), 
                new org.web3j.abi.datatypes.Bool(_isRegular), 
                new org.web3j.abi.datatypes.Bool(_withUpdate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> boostContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOOSTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> burnAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BURNADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnCake(Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNCAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_withUpdate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> cakePerBlock(Boolean _isRegular) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKEPERBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_isRegular)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> cakePerBlockToBurn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKEPERBLOCKTOBURN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> cakeRateToBurn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKERATETOBURN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> cakeRateToRegularFarm() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKERATETOREGULARFARM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> cakeRateToSpecialFarm() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKERATETOSPECIALFARM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger _pid, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> emergencyWithdraw(BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EMERGENCYWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBoostMultiplier(String _user, BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBOOSTMULTIPLIER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> harvestFromMasterChef() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_HARVESTFROMMASTERCHEF, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> init(String dummyToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, dummyToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> lastBurnedBlock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTBURNEDBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> lpToken(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LPTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> massUpdatePools() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MASSUPDATEPOOLS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> pendingCake(BigInteger _pid, String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PENDINGCAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid), 
                new org.web3j.abi.datatypes.Address(160, _user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, Boolean>> poolInfo(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POOLINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> poolLength() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_POOLLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> set(BigInteger _pid, BigInteger _allocPoint, Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid), 
                new org.web3j.abi.datatypes.generated.Uint256(_allocPoint), 
                new org.web3j.abi.datatypes.Bool(_withUpdate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalRegularAllocPoint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALREGULARALLOCPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSpecialAllocPoint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSPECIALALLOCPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBoostContract(String _newBoostContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBOOSTCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newBoostContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBoostMultiplier(String _user, BigInteger _pid, BigInteger _newMultiplier) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBOOSTMULTIPLIER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid), 
                new org.web3j.abi.datatypes.generated.Uint256(_newMultiplier)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBurnAdmin(String _newAdmin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEBURNADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCakeRate(BigInteger _burnRate, BigInteger _regularFarmRate, BigInteger _specialFarmRate, Boolean _withUpdate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECAKERATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_burnRate), 
                new org.web3j.abi.datatypes.generated.Uint256(_regularFarmRate), 
                new org.web3j.abi.datatypes.generated.Uint256(_specialFarmRate), 
                new org.web3j.abi.datatypes.Bool(_withUpdate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePool(BigInteger _pid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPOOL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateWhiteList(String _user, Boolean _isValid) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEWHITELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Bool(_isValid)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> userInfo(BigInteger param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> whiteList(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger _pid, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_pid), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MasterChefV2 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MasterChefV2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MasterChefV2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MasterChefV2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MasterChefV2 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MasterChefV2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MasterChefV2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MasterChefV2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MasterChefV2> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _MASTER_CHEF, String _CAKE, BigInteger _MASTER_PID, String _burnAdmin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _MASTER_CHEF), 
                new org.web3j.abi.datatypes.Address(160, _CAKE), 
                new org.web3j.abi.datatypes.generated.Uint256(_MASTER_PID), 
                new org.web3j.abi.datatypes.Address(160, _burnAdmin)));
        return deployRemoteCall(MasterChefV2.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MasterChefV2> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _MASTER_CHEF, String _CAKE, BigInteger _MASTER_PID, String _burnAdmin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _MASTER_CHEF), 
                new org.web3j.abi.datatypes.Address(160, _CAKE), 
                new org.web3j.abi.datatypes.generated.Uint256(_MASTER_PID), 
                new org.web3j.abi.datatypes.Address(160, _burnAdmin)));
        return deployRemoteCall(MasterChefV2.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MasterChefV2> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _MASTER_CHEF, String _CAKE, BigInteger _MASTER_PID, String _burnAdmin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _MASTER_CHEF), 
                new org.web3j.abi.datatypes.Address(160, _CAKE), 
                new org.web3j.abi.datatypes.generated.Uint256(_MASTER_PID), 
                new org.web3j.abi.datatypes.Address(160, _burnAdmin)));
        return deployRemoteCall(MasterChefV2.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MasterChefV2> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _MASTER_CHEF, String _CAKE, BigInteger _MASTER_PID, String _burnAdmin) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _MASTER_CHEF), 
                new org.web3j.abi.datatypes.Address(160, _CAKE), 
                new org.web3j.abi.datatypes.generated.Uint256(_MASTER_PID), 
                new org.web3j.abi.datatypes.Address(160, _burnAdmin)));
        return deployRemoteCall(MasterChefV2.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class PoolInfo extends StaticStruct {
        public BigInteger accCakePerShare;

        public BigInteger lastRewardBlock;

        public BigInteger allocPoint;

        public BigInteger totalBoostedShare;

        public Boolean isRegular;

        public PoolInfo(BigInteger accCakePerShare, BigInteger lastRewardBlock, BigInteger allocPoint, BigInteger totalBoostedShare, Boolean isRegular) {
            super(new org.web3j.abi.datatypes.generated.Uint256(accCakePerShare),new org.web3j.abi.datatypes.generated.Uint256(lastRewardBlock),new org.web3j.abi.datatypes.generated.Uint256(allocPoint),new org.web3j.abi.datatypes.generated.Uint256(totalBoostedShare),new org.web3j.abi.datatypes.Bool(isRegular));
            this.accCakePerShare = accCakePerShare;
            this.lastRewardBlock = lastRewardBlock;
            this.allocPoint = allocPoint;
            this.totalBoostedShare = totalBoostedShare;
            this.isRegular = isRegular;
        }

        public PoolInfo(Uint256 accCakePerShare, Uint256 lastRewardBlock, Uint256 allocPoint, Uint256 totalBoostedShare, Bool isRegular) {
            super(accCakePerShare,lastRewardBlock,allocPoint,totalBoostedShare,isRegular);
            this.accCakePerShare = accCakePerShare.getValue();
            this.lastRewardBlock = lastRewardBlock.getValue();
            this.allocPoint = allocPoint.getValue();
            this.totalBoostedShare = totalBoostedShare.getValue();
            this.isRegular = isRegular.getValue();
        }
    }

    public static class AddPoolEventResponse extends BaseEventResponse {
        public BigInteger pid;

        public String lpToken;

        public BigInteger allocPoint;

        public Boolean isRegular;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }

    public static class EmergencyWithdrawEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }

    public static class InitEventResponse extends BaseEventResponse {
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SetPoolEventResponse extends BaseEventResponse {
        public BigInteger pid;

        public BigInteger allocPoint;
    }

    public static class UpdateBoostContractEventResponse extends BaseEventResponse {
        public String boostContract;
    }

    public static class UpdateBoostMultiplierEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger oldMultiplier;

        public BigInteger newMultiplier;
    }

    public static class UpdateBurnAdminEventResponse extends BaseEventResponse {
        public String oldAdmin;

        public String newAdmin;
    }

    public static class UpdateCakeRateEventResponse extends BaseEventResponse {
        public BigInteger burnRate;

        public BigInteger regularFarmRate;

        public BigInteger specialFarmRate;
    }

    public static class UpdatePoolEventResponse extends BaseEventResponse {
        public BigInteger pid;

        public BigInteger lastRewardBlock;

        public BigInteger lpSupply;

        public BigInteger accCakePerShare;
    }

    public static class UpdateWhiteListEventResponse extends BaseEventResponse {
        public String user;

        public Boolean isValid;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger pid;

        public BigInteger amount;
    }
}
