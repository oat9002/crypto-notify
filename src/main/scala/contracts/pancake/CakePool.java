package contracts.pancake;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class CakePool extends Contract {
    public static final String BINARY = "60c060405262093a80600e556301e13380600f556301e1338060105562ed4e0060115564e8d4a5100060125560c860135560c8601455600a601555600a60165564e8d4a510006017556203f4806018553480156200005c57600080fd5b5060405162005369380380620053698339810160408190526200007f9162000157565b620000936200008d62000103565b62000107565b6000805460ff60a01b191690556001600160601b0319606096871b81166080529490951b90931660a052600880546001600160a01b039384166001600160a01b0319918216179091556009805492841692821692909217909155600a8054929093169116179055600b55620001f7565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060008060c0878903121562000170578182fd5b86516200017d81620001de565b60208801519096506200019081620001de565b6040880151909550620001a381620001de565b6060880151909450620001b681620001de565b6080880151909350620001c981620001de565b8092505060a087015190509295509295509295565b6001600160a01b0381168114620001f457600080fd5b50565b60805160601c60a05160601c6150e46200028560003960008181610ccb01528181610d880152818161176e015281816125d901528181613b960152613c7001526000818161151701528181611af50152818161276801528181612d760152818161312c0152818161317e015281816134820152818161355d01528181613ec301526140fb01526150e46000f3fe608060405234801561001057600080fd5b50600436106105145760003560e01c806387788782116102a1578063cb528b521161016b578063e464c623116100e3578063f2fde38b11610097578063f851a4401161007c578063f851a440146108fb578063fc0c546a14610903578063fd253b641461090b57610514565b8063f2fde38b146108d5578063f786b958146108e857610514565b8063e73008bc116100c8578063e73008bc146108b2578063e941fa78146108ba578063f0f44260146108c257610514565b8063e464c623146108a2578063e4b37ef5146108aa57610514565b8063def68a9c1161013a578063df10b4e61161011f578063df10b4e61461087f578063dfcedeee14610887578063e2bbb1581461088f57610514565b8063def68a9c14610859578063def7869d1461086c57610514565b8063cb528b5214610836578063ccd34cd51461076e578063d4b0de2f1461083e578063d826ed061461084657610514565b8063acaf88cd11610219578063bc75f4b8116101cd578063beba0fa0116101b2578063beba0fa0146107fd578063c54d349c14610810578063c6ed51be1461082357610514565b8063bc75f4b8146107ed578063bdca9165146107f557610514565b8063b6857844116101fe578063b6857844146105a2578063b6ac642a146107c7578063bb9f408d146107da57610514565b8063acaf88cd146107ac578063b3ab15fb146107b457610514565b8063948a03f211610270578063a3639b3911610255578063a3639b3914610789578063a5834e061461079c578063aaada5da146107a457610514565b8063948a03f21461076e57806395dc14e11461077657610514565b8063877887821461073857806387d4bda9146107405780638da5cb5b1461075357806393c99e6a1461075b57610514565b806348a0d754116103e25780636d4710b91161035a578063731ff24a1161030e57806378b4330f116102f357806378b4330f146105d05780638456cb5914610728578063853828b61461073057610514565b8063731ff24a1461071857806377c7b8fc1461072057610514565b806370897b231161033f57806370897b23146106f5578063715018a614610708578063722713f71461071057610514565b80636d4710b9146106da578063704b6c02146106e257610514565b8063570ca735116103b15780635c975abb116103965780635c975abb146106b757806361d027b3146106bf578063668679ba146106c757610514565b8063570ca735146106a757806358ebceb6146106af57610514565b806348a0d754146106715780634e4de1e9146106795780634f1bfc9e1461068c5780635521e9bf1461069457610514565b80632cfc5f01116104905780633a98ef39116104445780633f4ba83a116104295780633f4ba83a146106365780633fec4e321461063e578063423b93ed1461065e57610514565b80633a98ef39146106265780633eb788741461062e57610514565b80632e1a7d4d116104755780632e1a7d4d146105ed5780632f6c493c14610600578063359819211461061357610514565b80632cfc5f01146105d05780632d19b982146105d857610514565b80631959a002116104e75780631ea30fef116104cc5780631ea30fef146105a25780631efac1b8146105aa57806329a5cfd6146105bd57610514565b80631959a0021461056757806319ab453c1461058f57610514565b806301e813261461051957806305a9f274146105375780630c59696b1461053f57806314ff303914610554575b600080fd5b610521610913565b60405161052e9190614ee7565b60405180910390f35b61052161091b565b61055261054d3660046144b9565b610921565b005b6105526105623660046144b9565b6109fa565b61057a61057536600461441e565b610abc565b60405161052e99989796959493929190614f3d565b61055261059d36600461441e565b610b0e565b610521610e1d565b6105526105b83660046144b9565b610e27565b6105216105cb366004614472565b610eea565b610521611039565b6105e0611040565b60405161052e9190614526565b6105526105fb3660046144b9565b61105c565b61055261060e36600461441e565b6110e3565b6105526106213660046144b9565b611217565b6105216112d7565b6105216112dd565b6105526112e3565b61065161064c36600461441e565b6113a5565b60405161052e9190614607565b61055261066c36600461443a565b6113ba565b6105216114d7565b61055261068736600461443a565b6115a1565b6105216116be565b6105526106a23660046144b9565b6116c4565b6105e061174d565b610521611769565b61065161181f565b6105e0611840565b6106516106d536600461441e565b61185c565b610521611871565b6105526106f036600461441e565b611877565b6105526107033660046144b9565b6119ad565b610552611a6f565b610521611aee565b610521611ba6565b610521611bb6565b610552611c0d565b610552611cd0565b610521611ce9565b61065161074e36600461441e565b611cef565b6105e0611d04565b6105526107693660046144b9565b611d20565b610521611de6565b61052161078436600461441e565b611def565b6105526107973660046144b9565b611f60565b610521612020565b610521612026565b61052161202c565b6105526107c236600461441e565b612032565b6105526107d53660046144b9565b612168565b6105526107e83660046144b9565b61222a565b6105216122ec565b6105216122f2565b61055261080b36600461443a565b6122f8565b61055261081e3660046144b9565b612415565b61052161083136600461441e565b6124d5565b6105e06125d7565b6105216125fb565b61055261085436600461441e565b612601565b61055261086736600461441e565b612715565b61055261087a36600461441e565b6128b8565b6105216129cc565b6105e06129d2565b61055261089d3660046144e9565b6129ee565b610521612a7d565b610521612a83565b610521612a89565b610521612a8f565b6105526108d036600461441e565b612a95565b6105526108e336600461441e565b612bcb565b6105526108f63660046144b9565b612c94565b6105e0612d58565b6105e0612d74565b610521612d98565b6305265c0081565b600d5481565b60085473ffffffffffffffffffffffffffffffffffffffff16331461097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b60405180910390fd5b64e8d4a510008111156109ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614aee565b60178190556040517ff4bd1c5978320077e792afbb3911e8cab1325ce28a6b3e67f9067a1d80692961906109ef908390614ee7565b60405180910390a150565b60085473ffffffffffffffffffffffffffffffffffffffff163314610a4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b6101f4811115610a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614df6565b60168190556040517fcab352e118188b8a2f20a2e8c4ce1241ce2c1740aac4f17c5b0831e65824d8ef906109ef908390614ee7565b6003602081905260009182526040909120805460018201546002830154938301546004840154600585015460068601546007870154600890970154959794969495939492939192909160ff9091169089565b610b16612da2565b73ffffffffffffffffffffffffffffffffffffffff16610b34611d04565b73ffffffffffffffffffffffffffffffffffffffff1614610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190610bd6903390600401614526565b60206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2691906144d1565b905080610c5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614830565b610c8173ffffffffffffffffffffffffffffffffffffffff8316333084612da6565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063095ea7b390610cf5907f0000000000000000000000000000000000000000000000000000000000000000908590600401614578565b602060405180830381600087803b158015610d0f57600080fd5b505af1158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d47919061449d565b50600b546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e2bbb15891610dbe91908590600401614f14565b600060405180830381600087803b158015610dd857600080fd5b505af1158015610dec573d6000803e3d6000fd5b50506040517f57a86f7d14ccde89e22870afe839e3011216827daa9b24e18629f0a1e9d6cc14925060009150a15050565b6509184e72a00081565b60085473ffffffffffffffffffffffffffffffffffffffff163314610e78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b62093a80811115610eb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614d3c565b60188190556040517fb89ddaddb7435be26824cb48d2d0186c9525a2e1ec057abcb502704cdc0686cc906109ef908390614ee7565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054831115610f1d57805492505b3360009081526005602052604090205460ff16158015610f4d57506018548160010154610f4a9190614f7e565b42105b1561102d576000610f5c611769565b610f64611aee565b610f6e9190614f7e565b8254909150600090610f8564e8d4a5100087614fcf565b610f8f9190614f96565b90506000610f9c87612e4f565b60068501546007548654610fb09087614fcf565b610fba9190614f96565b610fc4919061500c565b610fce919061500c565b9050600064e8d4a51000610fe28484614fcf565b610fec9190614f96565b601554909150610ffb33612e6d565b1561100557506016545b60006127106110148385614fcf565b61101e9190614f96565b97506110339650505050505050565b60009150505b92915050565b62093a8081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b61106461181f565b1561109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b600081116110d5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906146d1565b6110e0816000612e73565b50565b803373ffffffffffffffffffffffffffffffffffffffff8216148061111f5750600a5473ffffffffffffffffffffffffffffffffffffffff1633145b611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c71565b61115d61181f565b15611194576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020600781015460ff1680156111d05750428160050154105b611206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614eb0565b61121260008085613246565b505050565b60085473ffffffffffffffffffffffffffffffffffffffff163314611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b600081116112a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a91565b60118190556040517f18b6d179114082d7eda9837e15a39eb30032d5f3df00487a67541398f48fabfe906109ef908390614ee7565b60075481565b60145481565b60085473ffffffffffffffffffffffffffffffffffffffff163314611334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b61133c61181f565b611372576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109729061469a565b61137a6138bc565b6040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60046020526000908152604090205460ff1681565b60085473ffffffffffffffffffffffffffffffffffffffff16331461140b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b73ffffffffffffffffffffffffffffffffffffffff8216611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319061154c903090600401614526565b60206040518083038186803b15801561156457600080fd5b505afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c91906144d1565b905090565b60085473ffffffffffffffffffffffffffffffffffffffff1633146115f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b73ffffffffffffffffffffffffffffffffffffffff821661163f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b73ffffffffffffffffffffffffffffffffffffffff821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b600f5481565b6116cc61181f565b15611703576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b6509184e72a0008111611742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614ca8565b6110e0600082612e73565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631175a1dd600b54306040518363ffffffff1660e01b81526004016117c9929190614ef0565b60206040518083038186803b1580156117e157600080fd5b505afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181991906144d1565b91505090565b60005474010000000000000000000000000000000000000000900460ff1690565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60066020526000908152604090205460ff1681565b600b5481565b61187f612da2565b73ffffffffffffffffffffffffffffffffffffffff1661189d611d04565b73ffffffffffffffffffffffffffffffffffffffff16146118ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b73ffffffffffffffffffffffffffffffffffffffff8116611937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c926109ef921690614526565b60085473ffffffffffffffffffffffffffffffffffffffff1633146119fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b6107d0811115611a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906149c6565b60138190556040517fefeafcf03e479a9566d7ef321b4816de0ba19cfa3cd0fae2f8c5f4a0afb342c4906109ef908390614ee7565b611a77612da2565b73ffffffffffffffffffffffffffffffffffffffff16611a95611d04565b73ffffffffffffffffffffffffffffffffffffffff1614611ae2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b611aec6000613962565b565b6000600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b4c9190614526565b60206040518083038186803b158015611b6457600080fd5b505afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c91906144d1565b61159c9190614f7e565b6b204fce5e3e2502611000000081565b6000600754600014611c0057600754611bcd611769565b611bd5611aee565b611bdf9190614f7e565b611bf190670de0b6b3a7640000614fcf565b611bfb9190614f96565b61159c565b50670de0b6b3a764000090565b60085473ffffffffffffffffffffffffffffffffffffffff163314611c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b611c6661181f565b15611c9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b611ca56139d7565b6040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b33600090815260036020526040902054611aec9061105c565b60135481565b60056020526000908152604090205460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b60085473ffffffffffffffffffffffffffffffffffffffff163314611d71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b652d79883d2000811115611db1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906147d3565b60128190556040517f7666dfff8c3377938e522b4eed3aff079973a976f95969db60a406d49f40da4e906109ef908390614ee7565b64e8d4a5100081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120805415801590611e285750600781015460ff165b8015611e5a575073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16155b8015611e76575042600e548260050154611e749190614f7e565b105b15611f55576000611e85611769565b611e8d611aee565b611e979190614f7e565b60068301546007548454929350600092611eb19085614fcf565b611ebb9190614f96565b611ec5919061500c565b90506000836008015482611ed9919061500c565b90506000600e54856005015442611ef0919061500c565b611efa919061500c565b9050601154811115611f0b57506011545b600060115460175483611f1e9190614fcf565b611f289190614f96565b9050600064e8d4a51000611f3c8386614fcf565b611f469190614f96565b9750611f5b9650505050505050565b60009150505b919050565b60085473ffffffffffffffffffffffffffffffffffffffff163314611fb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b60008111611feb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614765565b60108190556040517f9478eb023aac0a7d58a4e935377056bf27cf5b72a2300725f831817a8f62fbde906109ef908390614ee7565b60175481565b600e5481565b60115481565b61203a612da2565b73ffffffffffffffffffffffffffffffffffffffff16612058611d04565b73ffffffffffffffffffffffffffffffffffffffff16146120a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b73ffffffffffffffffffffffffffffffffffffffff81166120f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517fda12ee837e6978172aaf54b16145ffe08414fd8710092ef033c71b8eb6ec189a926109ef921690614526565b60085473ffffffffffffffffffffffffffffffffffffffff1633146121b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b6101f48111156121f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614df6565b60158190556040517fd5fe46099fa396290a7f57e36c3c3c8774e2562c18ed5d1dcc0fa75071e03f1d906109ef908390614ee7565b60085473ffffffffffffffffffffffffffffffffffffffff16331461227b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b6107d08111156122b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906149c6565b60148190556040517fc5d25457b67b87678c987375af13f6e50beb3ad7bfd009da26766ae986eaa20d906109ef908390614ee7565b60125481565b6107d081565b60085473ffffffffffffffffffffffffffffffffffffffff163314612349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b73ffffffffffffffffffffffffffffffffffffffff8216612396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b73ffffffffffffffffffffffffffffffffffffffff821660008181526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f3d7902bc9a6665bd7caf4240b834bb805d3cd68256889e9f8d2e40a10be41d4491a35050565b60085473ffffffffffffffffffffffffffffffffffffffff163314612466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b600081116124a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614e53565b600e8190556040517ff84bf2b901cfc02956d4e69556d7448cef4ea13587e7714dba7c6d697091e7ad906109ef908390614ee7565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040812080541580159061250f5750600781015460ff16155b8015612541575073ffffffffffffffffffffffffffffffffffffffff831660009081526004602052604090205460ff16155b15611f55576000612550611769565b612558611aee565b6125629190614f7e565b905060006007548284600001546125799190614fcf565b6125839190614f96565b90506000836002015482612597919061500c565b6013549091506125a687612e6d565b156125b057506014545b60006127106125bf8385614fcf565b6125c99190614f96565b9650611f5b95505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f481565b60085473ffffffffffffffffffffffffffffffffffffffff163314612652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b73ffffffffffffffffffffffffffffffffffffffff811661269f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517f5352e27b0414343d9438a1c6e9d04c65c7cb4d91f44920afee588f91717893f1926109ef921690614526565b60085473ffffffffffffffffffffffffffffffffffffffff163314612766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614867565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190612841903090600401614526565b60206040518083038186803b15801561285957600080fd5b505afa15801561286d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289191906144d1565b90506128b473ffffffffffffffffffffffffffffffffffffffff83163383613a7e565b5050565b60085473ffffffffffffffffffffffffffffffffffffffff163314612909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b73ffffffffffffffffffffffffffffffffffffffff8116612956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517f8f49a182922022d9119a1a6aeeca151b4a5665e86bd61c1ff32e152d459558b2926109ef921690614526565b60185481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6129f661181f565b15612a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b6000821180612a3c5750600081115b612a72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614663565b6128b4828233613246565b60105481565b60165481565b600c5481565b60155481565b612a9d612da2565b73ffffffffffffffffffffffffffffffffffffffff16612abb611d04565b73ffffffffffffffffffffffffffffffffffffffff1614612b08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b73ffffffffffffffffffffffffffffffffffffffff8116612b55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a5a565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040517fafa147634b29e2c7bd53ce194256b9f41cfb9ba3036f2b822fdd1d965beea086926109ef921690614526565b612bd3612da2565b73ffffffffffffffffffffffffffffffffffffffff16612bf1611d04565b73ffffffffffffffffffffffffffffffffffffffff1614612c3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c05565b73ffffffffffffffffffffffffffffffffffffffff8116612c8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614708565b6110e081613962565b60085473ffffffffffffffffffffffffffffffffffffffff163314612ce5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614c3a565b6305265c00811115612d23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614ba8565b600f8190556040517fcab2f3455b51b6ca5377e84fccd0f890b6f6ca36c02e18b6d36cb34f469fe4fe906109ef908390614ee7565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b652d79883d200081565b3390565b612e49846323b872dd60e01b858585604051602401612dc793929190614547565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613a9d565b50505050565b6000612e5a82611def565b612e63836124d5565b6110339190614f7e565b3b151590565b3360009081526003602052604090208054831115612ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906148c4565b42816005015410612efa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109729061479c565b60025473ffffffffffffffffffffffffffffffffffffffff1615612fa1576002546040517f51cff8d900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906351cff8d990612f6e903390600401614526565b600060405180830381600087803b158015612f8857600080fd5b505af1158015612f9c573d6000803e3d6000fd5b505050505b80548390600090612fbe6b204fce5e3e2502611000000084614fcf565b612fc89190614f96565b9050612fd2613b53565b612fdb33613d2a565b84158015612fe95750600084115b1561302a576000612ff8611aee565b905080600754866130099190614fcf565b6130139190614f96565b845490935083111561302457835492505b50613051565b82546b204fce5e3e25026110000000906130449083614fcf565b61304e9190614f96565b91505b60006007548361305f611aee565b6130699190614fcf565b6130739190614f96565b905082846000016000828254613089919061500c565b9250508190555082600760008282546130a2919061500c565b90915550503360009081526005602052604090205460ff161580156130d7575060185484600101546130d49190614f7e565b42105b15613164576015546130e833612e6d565b156130f257506016545b60006127106131018385614fcf565b61310b9190614f96565b6009549091506131559073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683613a7e565b61315f818461500c565b925050505b6131a573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383613a7e565b8354156131d7576007546131b7611aee565b85546131c39190614fcf565b6131cd9190614f96565b60028501556131df565b600060028501555b4260038501556131ee3361419b565b3373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688285604051613236929190614f14565b60405180910390a2505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020805415806132795750600084115b156132bd576509184e72a00084116132bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614b4b565b60058101548390421161331b5784156132fa574260048301556008820154600d80546000906132ed90849061500c565b9091555050600060088301555b8160040154826005015461330e919061500c565b6133189082614f7e565b90505b83158061332b575062093a808110155b613361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614932565b600f5481111561339d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610972906148fb565b60025473ffffffffffffffffffffffffffffffffffffffff1615613448576002546040517f0efe6a8b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690630efe6a8b906134159086908990899060040161459e565b600060405180830381600087803b15801561342f57600080fd5b505af1158015613443573d6000803e3d6000fd5b505050505b613450613b53565b6007546134ad5760006134616114d7565b6009549091506134ab9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683613a7e565b505b6134b683613d2a565b831561352d5742826005015410156134e55742600483018190556134db908590614f7e565b60058301556134ff565b838260050160008282546134f99190614f7e565b90915550505b6007820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b60008060008061353b611aee565b905088156135895761358573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001688308c612da6565b8892505b85541580159061359d5750600786015460ff165b156136165760075486546135b19083614fcf565b6135bb9190614f96565b91506135c78284614f7e565b92508560000154600760008282546135df919061500c565b90915550506000865560048601544214156136165760088601829055600d8054839190600090613610908490614f7e565b90915550505b6007541561364657613628828261500c565b6007546136359085614fcf565b61363f9190614f96565b935061364a565b8293505b8560040154866005015411156137cd57600060105460125488600401548960050154613676919061500c565b6136809190614fcf565b61368a9190614f96565b9050600064e8d4a5100061369e8784614fcf565b6136a89190614f96565b90506136b48187614f7e565b9550858860000160008282546136ca9190614f7e565b909155506000905064e8d4a510006136e28785614fcf565b6136ec9190614f96565b9050808960060160008282546137029190614f7e565b9250508190555080600c600082825461371b9190614f7e565b925050819055508b8960080160008282546137369190614f7e565b925050819055508b600d600082825461374f9190614f7e565b925050819055508973ffffffffffffffffffffffffffffffffffffffff167f2b943276e5d747f6f7dd46d3b880d8874cb8d6b9b88ca1903990a2738e7dc7a18a600801548b600001548c600401548d600501546137ac919061500c565b426040516137bd9493929190614f22565b60405180910390a25050506137e7565b838660000160008282546137e19190614f7e565b90915550505b60008911806137f65750600088115b15613802574260018701555b83600760008282546138149190614f7e565b90915550506006860154600754613829611aee565b88546138359190614fcf565b61383f9190614f96565b613849919061500c565b600287015542600387015561385d8761419b565b8673ffffffffffffffffffffffffffffffffffffffff167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f98a868b426040516138a99493929190614f22565b60405180910390a2505050505050505050565b6138c461181f565b6138fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109729061469a565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61394b612da2565b6040516139589190614526565b60405180910390a1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6139df61181f565b15613a16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614a23565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861394b612da2565b6112128363a9059cbb60e01b8484604051602401612dc7929190614578565b6000613aff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166142959092919063ffffffff16565b8051909150156112125780806020019051810190613b1d919061449d565b611212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614d99565b600b546040517f1175a1dd00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691631175a1dd91613bcb913090600401614ef0565b60206040518083038186803b158015613be357600080fd5b505afa158015613bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1b91906144d1565b905080156110e0576000613c2d6114d7565b600b546040517f441a3e7000000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163441a3e7091613ca691600090600401614f14565b600060405180830381600087803b158015613cc057600080fd5b505af1158015613cd4573d6000803e3d6000fd5b505050506000613ce26114d7565b9050337fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba613d10848461500c565b604051613d1d9190614ee7565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090208054156128b457600781015460ff161561402257600081600601546007548360000154613d7a611aee565b613d849190614fcf565b613d8e9190614f96565b613d98919061500c565b90508160060154600c6000828254613db0919061500c565b909155505060006006830181905582546007805491929091613dd390849061500c565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205460ff16158015613e1e575042600e548360050154613e1c9190614f7e565b105b15613efd576000826008015482613e35919061500c565b90506000600e54846005015442613e4c919061500c565b613e56919061500c565b9050601154811115613e6757506011545b600060115460175483613e7a9190614fcf565b613e849190614f96565b9050600064e8d4a51000613e988386614fcf565b613ea29190614f96565b600954909150613eec9073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683613a7e565b613ef6818661500c565b9450505050505b6000613f07611aee565b90506000600754600014613f3d57613f1f838361500c565b600754613f2c9085614fcf565b613f369190614f96565b9050613f40565b50815b80845560078054829190600090613f58908490614f7e565b9091555050600584015442111561401a576007840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600060048501819055600585018190556008850154600d805491929091613fbb90849061500c565b90915550506000600885015560405173ffffffffffffffffffffffffffffffffffffffff8616907ff7870c5b224cbc19873599e46ccfc7103934650509b1af0c3ce90138377c2004906140119086904290614f14565b60405180910390a25b5050506128b4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff166128b457600060075461405c611aee565b83546140689190614fcf565b6140729190614f96565b905081600001546007600082825461408a919061500c565b9091555050600080835560028301546140a3908361500c565b6013549091506140b285612e6d565b156140bc57506014545b60006127106140cb8385614fcf565b6140d59190614f96565b90508015614131576009546141249073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116911683613a7e565b61412e818561500c565b93505b600061413b611aee565b9050600060075460001461417157614153868361500c565b6007546141609088614fcf565b61416a9190614f96565b9050614174565b50845b8087556007805482919060009061418c908490614f7e565b90915550505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16156110e05773ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120600481015460058201549192916141f5919061500c565b6001546008840154600d546010546040517fe874fdaf00000000000000000000000000000000000000000000000000000000815294955073ffffffffffffffffffffffffffffffffffffffff9093169363e874fdaf9361425e93899390928892906004016145cc565b600060405180830381600087803b15801561427857600080fd5b505af115801561428c573d6000803e3d6000fd5b50505050505050565b60606142a484846000856142ae565b90505b9392505050565b6060824710156142ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614969565b6142f3856143af565b614329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097290614d05565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614352919061450a565b60006040518083038185875af1925050503d806000811461438f576040519150601f19603f3d011682016040523d82523d6000602084013e614394565b606091505b50915091506143a48282866143cb565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b606083156143da5750816142a7565b8251156143ea5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109729190614612565b60006020828403121561442f578081fd5b81356142a78161507e565b6000806040838503121561444c578081fd5b82356144578161507e565b91506020830135614467816150a0565b809150509250929050565b60008060408385031215614484578182fd5b823561448f8161507e565b946020939093013593505050565b6000602082840312156144ae578081fd5b81516142a7816150a0565b6000602082840312156144ca578081fd5b5035919050565b6000602082840312156144e2578081fd5b5051919050565b600080604083850312156144fb578182fd5b50508035926020909101359150565b6000825161451c818460208701615023565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b901515815260200190565b6000602082528251806020840152614631816040850160208701615023565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526012908201527f4e6f7468696e6720746f206465706f7369740000000000000000000000000000604082015260600190565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526013908201527f4e6f7468696e6720746f20776974686472617700000000000000000000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f4455524154494f4e5f464143544f522063616e6e6f74206265207a65726f0000604082015260600190565b6020808252600d908201527f5374696c6c20696e206c6f636b00000000000000000000000000000000000000604082015260600190565b60208082526033908201527f424f4f53545f5745494748542063616e6e6f74206265206d6f7265207468616e60408201527f20424f4f53545f5745494748545f4c494d495400000000000000000000000000606082015260800190565b60208082526015908201527f42616c616e6365206d7573742065786365656420300000000000000000000000604082015260600190565b60208082526025908201527f546f6b656e2063616e6e6f742062652073616d65206173206465706f7369742060408201527f746f6b656e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f576974686472617720616d6f756e7420657863656564732062616c616e636500604082015260600190565b6020808252601c908201527f4d6178696d756d206c6f636b20706572696f6420657863656564656400000000604082015260600190565b6020808252601f908201527f4d696e696d756d206c6f636b20706572696f64206973206f6e65207765656b00604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f706572666f726d616e63654665652063616e6e6f74206265206d6f726520746860408201527f616e204d41585f504552464f524d414e43455f46454500000000000000000000606082015260800190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526016908201527f43616e6e6f74206265207a65726f206164647265737300000000000000000000604082015260600190565b60208082526026908201527f4455524154494f4e5f464143544f525f4f5645524455452063616e6e6f74206260408201527f65207a65726f0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f6f7665726475654665652063616e6e6f74206265206d6f7265207468616e204d60408201527f41585f4f5645524455455f464545000000000000000000000000000000000000606082015260800190565b60208082526036908201527f4465706f73697420616d6f756e74206d7573742062652067726561746572207460408201527f68616e204d494e5f4445504f5349545f414d4f554e5400000000000000000000606082015260800190565b6020808252603d908201527f4d41585f4c4f434b5f4455524154494f4e2063616e6e6f74206265206d6f726560408201527f207468616e204d41585f4c4f434b5f4455524154494f4e5f4c494d4954000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600b908201527f61646d696e3a207775743f000000000000000000000000000000000000000000604082015260600190565b6020808252601a908201527f4e6f74206f70657261746f72206f722063616b65206f776e6572000000000000604082015260600190565b60208082526038908201527f576974686472617720616d6f756e74206d75737420626520677265617465722060408201527f7468616e204d494e5f57495448445241575f414d4f554e540000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252603d908201527f7769746864726177466565506572696f642063616e6e6f74206265206d6f726560408201527f207468616e204d41585f57495448445241575f4645455f504552494f44000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f77697468647261774665652063616e6e6f74206265206d6f7265207468616e2060408201527f4d41585f57495448445241575f46454500000000000000000000000000000000606082015260800190565b60208082526023908201527f554e4c4f434b5f465245455f4455524154494f4e2063616e6e6f74206265207a60408201527f65726f0000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526011908201527f43616e6e6f7420756e6c6f636b20796574000000000000000000000000000000604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b988952602089019790975260408801959095526060870193909352608086019190915260a085015260c0840152151560e08301526101008201526101200190565b60008219821115614f9157614f9161504f565b500190565b600082614fca577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156150075761500761504f565b500290565b60008282101561501e5761501e61504f565b500390565b60005b8381101561503e578181015183820152602001615026565b83811115612e495750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146110e057600080fd5b80151581146110e057600080fdfea2646970667358221220161b312fa06b5510bce35751461f7d7626cd70db69df524969ca0f6c75d7dc4364736f6c634300080100330000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce82000000000000000000000000a5f8c5dbd5f286960b9d90548680ae5ebff076520000000000000000000000007a2c5c265bdc9724dace715c5ff60eea40e07f47000000000000000000000000ecc90d54b10add1ab746abe7e83abe178b72aa9e000000000000000000000000ecc90d54b10add1ab746abe7e83abe178b72aa9e0000000000000000000000000000000000000000000000000000000000000000\n"
            + "\n";

    public static final String FUNC_BOOST_WEIGHT = "BOOST_WEIGHT";

    public static final String FUNC_BOOST_WEIGHT_LIMIT = "BOOST_WEIGHT_LIMIT";

    public static final String FUNC_DURATION_FACTOR = "DURATION_FACTOR";

    public static final String FUNC_DURATION_FACTOR_OVERDUE = "DURATION_FACTOR_OVERDUE";

    public static final String FUNC_MAX_LOCK_DURATION = "MAX_LOCK_DURATION";

    public static final String FUNC_MAX_LOCK_DURATION_LIMIT = "MAX_LOCK_DURATION_LIMIT";

    public static final String FUNC_MAX_OVERDUE_FEE = "MAX_OVERDUE_FEE";

    public static final String FUNC_MAX_PERFORMANCE_FEE = "MAX_PERFORMANCE_FEE";

    public static final String FUNC_MAX_WITHDRAW_FEE = "MAX_WITHDRAW_FEE";

    public static final String FUNC_MAX_WITHDRAW_FEE_PERIOD = "MAX_WITHDRAW_FEE_PERIOD";

    public static final String FUNC_MIN_DEPOSIT_AMOUNT = "MIN_DEPOSIT_AMOUNT";

    public static final String FUNC_MIN_LOCK_DURATION = "MIN_LOCK_DURATION";

    public static final String FUNC_MIN_WITHDRAW_AMOUNT = "MIN_WITHDRAW_AMOUNT";

    public static final String FUNC_PRECISION_FACTOR = "PRECISION_FACTOR";

    public static final String FUNC_PRECISION_FACTOR_SHARE = "PRECISION_FACTOR_SHARE";

    public static final String FUNC_UNLOCK_FREE_DURATION = "UNLOCK_FREE_DURATION";

    public static final String FUNC_VCAKE = "VCake";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_AVAILABLE = "available";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BOOSTCONTRACT = "boostContract";

    public static final String FUNC_CAKEPOOLPID = "cakePoolPID";

    public static final String FUNC_CALCULATEOVERDUEFEE = "calculateOverdueFee";

    public static final String FUNC_CALCULATEPERFORMANCEFEE = "calculatePerformanceFee";

    public static final String FUNC_CALCULATETOTALPENDINGCAKEREWARDS = "calculateTotalPendingCakeRewards";

    public static final String FUNC_CALCULATEWITHDRAWFEE = "calculateWithdrawFee";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_FREEOVERDUEFEEUSERS = "freeOverdueFeeUsers";

    public static final String FUNC_FREEPERFORMANCEFEEUSERS = "freePerformanceFeeUsers";

    public static final String FUNC_FREEWITHDRAWFEEUSERS = "freeWithdrawFeeUsers";

    public static final String FUNC_GETPRICEPERFULLSHARE = "getPricePerFullShare";

    public static final String FUNC_INCASETOKENSGETSTUCK = "inCaseTokensGetStuck";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_MASTERCHEFV2 = "masterchefV2";

    public static final String FUNC_OPERATOR = "operator";

    public static final String FUNC_OVERDUEFEE = "overdueFee";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PERFORMANCEFEE = "performanceFee";

    public static final String FUNC_PERFORMANCEFEECONTRACT = "performanceFeeContract";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETADMIN = "setAdmin";

    public static final String FUNC_SETBOOSTCONTRACT = "setBoostContract";

    public static final String FUNC_SETBOOSTWEIGHT = "setBoostWeight";

    public static final String FUNC_SETDURATIONFACTOR = "setDurationFactor";

    public static final String FUNC_SETDURATIONFACTOROVERDUE = "setDurationFactorOverdue";

    public static final String FUNC_SETFREEPERFORMANCEFEEUSER = "setFreePerformanceFeeUser";

    public static final String FUNC_SETMAXLOCKDURATION = "setMaxLockDuration";

    public static final String FUNC_SETOPERATOR = "setOperator";

    public static final String FUNC_SETOVERDUEFEE = "setOverdueFee";

    public static final String FUNC_SETOVERDUEFEEUSER = "setOverdueFeeUser";

    public static final String FUNC_SETPERFORMANCEFEE = "setPerformanceFee";

    public static final String FUNC_SETPERFORMANCEFEECONTRACT = "setPerformanceFeeContract";

    public static final String FUNC_SETTREASURY = "setTreasury";

    public static final String FUNC_SETUNLOCKFREEDURATION = "setUnlockFreeDuration";

    public static final String FUNC_SETVCAKECONTRACT = "setVCakeContract";

    public static final String FUNC_SETWITHDRAWFEE = "setWithdrawFee";

    public static final String FUNC_SETWITHDRAWFEECONTRACT = "setWithdrawFeeContract";

    public static final String FUNC_SETWITHDRAWFEEPERIOD = "setWithdrawFeePeriod";

    public static final String FUNC_SETWITHDRAWFEEUSER = "setWithdrawFeeUser";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_TOTALBOOSTDEBT = "totalBoostDebt";

    public static final String FUNC_TOTALLOCKEDAMOUNT = "totalLockedAmount";

    public static final String FUNC_TOTALSHARES = "totalShares";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TREASURY = "treasury";

    public static final String FUNC_UNLOCK = "unlock";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWALL = "withdrawAll";

    public static final String FUNC_WITHDRAWBYAMOUNT = "withdrawByAmount";

    public static final String FUNC_WITHDRAWFEE = "withdrawFee";

    public static final String FUNC_WITHDRAWFEECONTRACT = "withdrawFeeContract";

    public static final String FUNC_WITHDRAWFEEPERIOD = "withdrawFeePeriod";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FREEFEEUSER_EVENT = new Event("FreeFeeUser", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bool>(true) {}));
    ;

    public static final Event HARVEST_EVENT = new Event("Harvest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INIT_EVENT = new Event("Init", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event LOCK_EVENT = new Event("Lock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWADMIN_EVENT = new Event("NewAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NEWBOOSTCONTRACT_EVENT = new Event("NewBoostContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NEWBOOSTWEIGHT_EVENT = new Event("NewBoostWeight", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWDURATIONFACTOR_EVENT = new Event("NewDurationFactor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWDURATIONFACTOROVERDUE_EVENT = new Event("NewDurationFactorOverdue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWMAXLOCKDURATION_EVENT = new Event("NewMaxLockDuration", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWOPERATOR_EVENT = new Event("NewOperator", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NEWOVERDUEFEE_EVENT = new Event("NewOverdueFee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWPERFORMANCEFEE_EVENT = new Event("NewPerformanceFee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWPERFORMANCEFEECONTRACT_EVENT = new Event("NewPerformanceFeeContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWTREASURY_EVENT = new Event("NewTreasury", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NEWUNLOCKFREEDURATION_EVENT = new Event("NewUnlockFreeDuration", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWVCAKECONTRACT_EVENT = new Event("NewVCakeContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event NEWWITHDRAWFEE_EVENT = new Event("NewWithdrawFee", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWWITHDRAWFEECONTRACT_EVENT = new Event("NewWithdrawFeeContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWWITHDRAWFEEPERIOD_EVENT = new Event("NewWithdrawFeePeriod", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSE_EVENT = new Event("Pause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event UNLOCK_EVENT = new Event("Unlock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UNPAUSE_EVENT = new Event("Unpause", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected CakePool(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CakePool(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CakePool(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CakePool(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.lastDepositedTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.duration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.lastDepositedTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public List<FreeFeeUserEventResponse> getFreeFeeUserEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FREEFEEUSER_EVENT, transactionReceipt);
        ArrayList<FreeFeeUserEventResponse> responses = new ArrayList<FreeFeeUserEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FreeFeeUserEventResponse typedResponse = new FreeFeeUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.free = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FreeFeeUserEventResponse> freeFeeUserEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FreeFeeUserEventResponse>() {
            @Override
            public FreeFeeUserEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FREEFEEUSER_EVENT, log);
                FreeFeeUserEventResponse typedResponse = new FreeFeeUserEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.free = (Boolean) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FreeFeeUserEventResponse> freeFeeUserEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FREEFEEUSER_EVENT));
        return freeFeeUserEventFlowable(filter);
    }

    public List<HarvestEventResponse> getHarvestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(HARVEST_EVENT, transactionReceipt);
        ArrayList<HarvestEventResponse> responses = new ArrayList<HarvestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            HarvestEventResponse typedResponse = new HarvestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<HarvestEventResponse> harvestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, HarvestEventResponse>() {
            @Override
            public HarvestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(HARVEST_EVENT, log);
                HarvestEventResponse typedResponse = new HarvestEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<HarvestEventResponse> harvestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(HARVEST_EVENT));
        return harvestEventFlowable(filter);
    }

    public List<InitEventResponse> getInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INIT_EVENT, transactionReceipt);
        ArrayList<InitEventResponse> responses = new ArrayList<InitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitEventResponse typedResponse = new InitEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitEventResponse> initEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitEventResponse>() {
            @Override
            public InitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INIT_EVENT, log);
                InitEventResponse typedResponse = new InitEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<InitEventResponse> initEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INIT_EVENT));
        return initEventFlowable(filter);
    }

    public List<LockEventResponse> getLockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOCK_EVENT, transactionReceipt);
        ArrayList<LockEventResponse> responses = new ArrayList<LockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LockEventResponse typedResponse = new LockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.lockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lockedDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LockEventResponse> lockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LockEventResponse>() {
            @Override
            public LockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOCK_EVENT, log);
                LockEventResponse typedResponse = new LockEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.lockedAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.lockedDuration = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LockEventResponse> lockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOCK_EVENT));
        return lockEventFlowable(filter);
    }

    public List<NewAdminEventResponse> getNewAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWADMIN_EVENT, transactionReceipt);
        ArrayList<NewAdminEventResponse> responses = new ArrayList<NewAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewAdminEventResponse typedResponse = new NewAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.admin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewAdminEventResponse> newAdminEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewAdminEventResponse>() {
            @Override
            public NewAdminEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWADMIN_EVENT, log);
                NewAdminEventResponse typedResponse = new NewAdminEventResponse();
                typedResponse.log = log;
                typedResponse.admin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewAdminEventResponse> newAdminEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWADMIN_EVENT));
        return newAdminEventFlowable(filter);
    }

    public List<NewBoostContractEventResponse> getNewBoostContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBOOSTCONTRACT_EVENT, transactionReceipt);
        ArrayList<NewBoostContractEventResponse> responses = new ArrayList<NewBoostContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBoostContractEventResponse typedResponse = new NewBoostContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.boostContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBoostContractEventResponse> newBoostContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewBoostContractEventResponse>() {
            @Override
            public NewBoostContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBOOSTCONTRACT_EVENT, log);
                NewBoostContractEventResponse typedResponse = new NewBoostContractEventResponse();
                typedResponse.log = log;
                typedResponse.boostContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewBoostContractEventResponse> newBoostContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBOOSTCONTRACT_EVENT));
        return newBoostContractEventFlowable(filter);
    }

    public List<NewBoostWeightEventResponse> getNewBoostWeightEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBOOSTWEIGHT_EVENT, transactionReceipt);
        ArrayList<NewBoostWeightEventResponse> responses = new ArrayList<NewBoostWeightEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBoostWeightEventResponse typedResponse = new NewBoostWeightEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.boostWeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBoostWeightEventResponse> newBoostWeightEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewBoostWeightEventResponse>() {
            @Override
            public NewBoostWeightEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBOOSTWEIGHT_EVENT, log);
                NewBoostWeightEventResponse typedResponse = new NewBoostWeightEventResponse();
                typedResponse.log = log;
                typedResponse.boostWeight = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewBoostWeightEventResponse> newBoostWeightEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBOOSTWEIGHT_EVENT));
        return newBoostWeightEventFlowable(filter);
    }

    public List<NewDurationFactorEventResponse> getNewDurationFactorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDURATIONFACTOR_EVENT, transactionReceipt);
        ArrayList<NewDurationFactorEventResponse> responses = new ArrayList<NewDurationFactorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDurationFactorEventResponse typedResponse = new NewDurationFactorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.durationFactor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewDurationFactorEventResponse> newDurationFactorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewDurationFactorEventResponse>() {
            @Override
            public NewDurationFactorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDURATIONFACTOR_EVENT, log);
                NewDurationFactorEventResponse typedResponse = new NewDurationFactorEventResponse();
                typedResponse.log = log;
                typedResponse.durationFactor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewDurationFactorEventResponse> newDurationFactorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDURATIONFACTOR_EVENT));
        return newDurationFactorEventFlowable(filter);
    }

    public List<NewDurationFactorOverdueEventResponse> getNewDurationFactorOverdueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDURATIONFACTOROVERDUE_EVENT, transactionReceipt);
        ArrayList<NewDurationFactorOverdueEventResponse> responses = new ArrayList<NewDurationFactorOverdueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDurationFactorOverdueEventResponse typedResponse = new NewDurationFactorOverdueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.durationFactorOverdue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewDurationFactorOverdueEventResponse> newDurationFactorOverdueEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewDurationFactorOverdueEventResponse>() {
            @Override
            public NewDurationFactorOverdueEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDURATIONFACTOROVERDUE_EVENT, log);
                NewDurationFactorOverdueEventResponse typedResponse = new NewDurationFactorOverdueEventResponse();
                typedResponse.log = log;
                typedResponse.durationFactorOverdue = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewDurationFactorOverdueEventResponse> newDurationFactorOverdueEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDURATIONFACTOROVERDUE_EVENT));
        return newDurationFactorOverdueEventFlowable(filter);
    }

    public List<NewMaxLockDurationEventResponse> getNewMaxLockDurationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMAXLOCKDURATION_EVENT, transactionReceipt);
        ArrayList<NewMaxLockDurationEventResponse> responses = new ArrayList<NewMaxLockDurationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewMaxLockDurationEventResponse typedResponse = new NewMaxLockDurationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.maxLockDuration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewMaxLockDurationEventResponse> newMaxLockDurationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewMaxLockDurationEventResponse>() {
            @Override
            public NewMaxLockDurationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMAXLOCKDURATION_EVENT, log);
                NewMaxLockDurationEventResponse typedResponse = new NewMaxLockDurationEventResponse();
                typedResponse.log = log;
                typedResponse.maxLockDuration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewMaxLockDurationEventResponse> newMaxLockDurationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMAXLOCKDURATION_EVENT));
        return newMaxLockDurationEventFlowable(filter);
    }

    public List<NewOperatorEventResponse> getNewOperatorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWOPERATOR_EVENT, transactionReceipt);
        ArrayList<NewOperatorEventResponse> responses = new ArrayList<NewOperatorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewOperatorEventResponse typedResponse = new NewOperatorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewOperatorEventResponse> newOperatorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewOperatorEventResponse>() {
            @Override
            public NewOperatorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWOPERATOR_EVENT, log);
                NewOperatorEventResponse typedResponse = new NewOperatorEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewOperatorEventResponse> newOperatorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWOPERATOR_EVENT));
        return newOperatorEventFlowable(filter);
    }

    public List<NewOverdueFeeEventResponse> getNewOverdueFeeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWOVERDUEFEE_EVENT, transactionReceipt);
        ArrayList<NewOverdueFeeEventResponse> responses = new ArrayList<NewOverdueFeeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewOverdueFeeEventResponse typedResponse = new NewOverdueFeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.overdueFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewOverdueFeeEventResponse> newOverdueFeeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewOverdueFeeEventResponse>() {
            @Override
            public NewOverdueFeeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWOVERDUEFEE_EVENT, log);
                NewOverdueFeeEventResponse typedResponse = new NewOverdueFeeEventResponse();
                typedResponse.log = log;
                typedResponse.overdueFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewOverdueFeeEventResponse> newOverdueFeeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWOVERDUEFEE_EVENT));
        return newOverdueFeeEventFlowable(filter);
    }

    public List<NewPerformanceFeeEventResponse> getNewPerformanceFeeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPERFORMANCEFEE_EVENT, transactionReceipt);
        ArrayList<NewPerformanceFeeEventResponse> responses = new ArrayList<NewPerformanceFeeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPerformanceFeeEventResponse typedResponse = new NewPerformanceFeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.performanceFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPerformanceFeeEventResponse> newPerformanceFeeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewPerformanceFeeEventResponse>() {
            @Override
            public NewPerformanceFeeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPERFORMANCEFEE_EVENT, log);
                NewPerformanceFeeEventResponse typedResponse = new NewPerformanceFeeEventResponse();
                typedResponse.log = log;
                typedResponse.performanceFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewPerformanceFeeEventResponse> newPerformanceFeeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPERFORMANCEFEE_EVENT));
        return newPerformanceFeeEventFlowable(filter);
    }

    public List<NewPerformanceFeeContractEventResponse> getNewPerformanceFeeContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPERFORMANCEFEECONTRACT_EVENT, transactionReceipt);
        ArrayList<NewPerformanceFeeContractEventResponse> responses = new ArrayList<NewPerformanceFeeContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPerformanceFeeContractEventResponse typedResponse = new NewPerformanceFeeContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.performanceFeeContract = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPerformanceFeeContractEventResponse> newPerformanceFeeContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewPerformanceFeeContractEventResponse>() {
            @Override
            public NewPerformanceFeeContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPERFORMANCEFEECONTRACT_EVENT, log);
                NewPerformanceFeeContractEventResponse typedResponse = new NewPerformanceFeeContractEventResponse();
                typedResponse.log = log;
                typedResponse.performanceFeeContract = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewPerformanceFeeContractEventResponse> newPerformanceFeeContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPERFORMANCEFEECONTRACT_EVENT));
        return newPerformanceFeeContractEventFlowable(filter);
    }

    public List<NewTreasuryEventResponse> getNewTreasuryEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTREASURY_EVENT, transactionReceipt);
        ArrayList<NewTreasuryEventResponse> responses = new ArrayList<NewTreasuryEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTreasuryEventResponse typedResponse = new NewTreasuryEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.treasury = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewTreasuryEventResponse> newTreasuryEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewTreasuryEventResponse>() {
            @Override
            public NewTreasuryEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTREASURY_EVENT, log);
                NewTreasuryEventResponse typedResponse = new NewTreasuryEventResponse();
                typedResponse.log = log;
                typedResponse.treasury = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewTreasuryEventResponse> newTreasuryEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTREASURY_EVENT));
        return newTreasuryEventFlowable(filter);
    }

    public List<NewUnlockFreeDurationEventResponse> getNewUnlockFreeDurationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWUNLOCKFREEDURATION_EVENT, transactionReceipt);
        ArrayList<NewUnlockFreeDurationEventResponse> responses = new ArrayList<NewUnlockFreeDurationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewUnlockFreeDurationEventResponse typedResponse = new NewUnlockFreeDurationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.unlockFreeDuration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewUnlockFreeDurationEventResponse> newUnlockFreeDurationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewUnlockFreeDurationEventResponse>() {
            @Override
            public NewUnlockFreeDurationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWUNLOCKFREEDURATION_EVENT, log);
                NewUnlockFreeDurationEventResponse typedResponse = new NewUnlockFreeDurationEventResponse();
                typedResponse.log = log;
                typedResponse.unlockFreeDuration = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewUnlockFreeDurationEventResponse> newUnlockFreeDurationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWUNLOCKFREEDURATION_EVENT));
        return newUnlockFreeDurationEventFlowable(filter);
    }

    public List<NewVCakeContractEventResponse> getNewVCakeContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWVCAKECONTRACT_EVENT, transactionReceipt);
        ArrayList<NewVCakeContractEventResponse> responses = new ArrayList<NewVCakeContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewVCakeContractEventResponse typedResponse = new NewVCakeContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.VCake = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewVCakeContractEventResponse> newVCakeContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewVCakeContractEventResponse>() {
            @Override
            public NewVCakeContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWVCAKECONTRACT_EVENT, log);
                NewVCakeContractEventResponse typedResponse = new NewVCakeContractEventResponse();
                typedResponse.log = log;
                typedResponse.VCake = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewVCakeContractEventResponse> newVCakeContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWVCAKECONTRACT_EVENT));
        return newVCakeContractEventFlowable(filter);
    }

    public List<NewWithdrawFeeEventResponse> getNewWithdrawFeeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWWITHDRAWFEE_EVENT, transactionReceipt);
        ArrayList<NewWithdrawFeeEventResponse> responses = new ArrayList<NewWithdrawFeeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewWithdrawFeeEventResponse typedResponse = new NewWithdrawFeeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.withdrawFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewWithdrawFeeEventResponse> newWithdrawFeeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewWithdrawFeeEventResponse>() {
            @Override
            public NewWithdrawFeeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWWITHDRAWFEE_EVENT, log);
                NewWithdrawFeeEventResponse typedResponse = new NewWithdrawFeeEventResponse();
                typedResponse.log = log;
                typedResponse.withdrawFee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewWithdrawFeeEventResponse> newWithdrawFeeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWWITHDRAWFEE_EVENT));
        return newWithdrawFeeEventFlowable(filter);
    }

    public List<NewWithdrawFeeContractEventResponse> getNewWithdrawFeeContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWWITHDRAWFEECONTRACT_EVENT, transactionReceipt);
        ArrayList<NewWithdrawFeeContractEventResponse> responses = new ArrayList<NewWithdrawFeeContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewWithdrawFeeContractEventResponse typedResponse = new NewWithdrawFeeContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.withdrawFeeContract = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewWithdrawFeeContractEventResponse> newWithdrawFeeContractEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewWithdrawFeeContractEventResponse>() {
            @Override
            public NewWithdrawFeeContractEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWWITHDRAWFEECONTRACT_EVENT, log);
                NewWithdrawFeeContractEventResponse typedResponse = new NewWithdrawFeeContractEventResponse();
                typedResponse.log = log;
                typedResponse.withdrawFeeContract = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewWithdrawFeeContractEventResponse> newWithdrawFeeContractEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWWITHDRAWFEECONTRACT_EVENT));
        return newWithdrawFeeContractEventFlowable(filter);
    }

    public List<NewWithdrawFeePeriodEventResponse> getNewWithdrawFeePeriodEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWWITHDRAWFEEPERIOD_EVENT, transactionReceipt);
        ArrayList<NewWithdrawFeePeriodEventResponse> responses = new ArrayList<NewWithdrawFeePeriodEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewWithdrawFeePeriodEventResponse typedResponse = new NewWithdrawFeePeriodEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.withdrawFeePeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewWithdrawFeePeriodEventResponse> newWithdrawFeePeriodEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewWithdrawFeePeriodEventResponse>() {
            @Override
            public NewWithdrawFeePeriodEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWWITHDRAWFEEPERIOD_EVENT, log);
                NewWithdrawFeePeriodEventResponse typedResponse = new NewWithdrawFeePeriodEventResponse();
                typedResponse.log = log;
                typedResponse.withdrawFeePeriod = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewWithdrawFeePeriodEventResponse> newWithdrawFeePeriodEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWWITHDRAWFEEPERIOD_EVENT));
        return newWithdrawFeePeriodEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSE_EVENT, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSE_EVENT, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<PauseEventResponse> pauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSE_EVENT));
        return pauseEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<UnlockEventResponse> getUnlockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNLOCK_EVENT, transactionReceipt);
        ArrayList<UnlockEventResponse> responses = new ArrayList<UnlockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockEventResponse typedResponse = new UnlockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.blockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnlockEventResponse> unlockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnlockEventResponse>() {
            @Override
            public UnlockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNLOCK_EVENT, log);
                UnlockEventResponse typedResponse = new UnlockEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.blockTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnlockEventResponse> unlockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNLOCK_EVENT));
        return unlockEventFlowable(filter);
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSE_EVENT, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSE_EVENT, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<UnpauseEventResponse> unpauseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSE_EVENT));
        return unpauseEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.shares = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> BOOST_WEIGHT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOOST_WEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> BOOST_WEIGHT_LIMIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOOST_WEIGHT_LIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> DURATION_FACTOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DURATION_FACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> DURATION_FACTOR_OVERDUE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DURATION_FACTOR_OVERDUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_LOCK_DURATION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_LOCK_DURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_LOCK_DURATION_LIMIT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_LOCK_DURATION_LIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_OVERDUE_FEE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_OVERDUE_FEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_PERFORMANCE_FEE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_PERFORMANCE_FEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_WITHDRAW_FEE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_WITHDRAW_FEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MAX_WITHDRAW_FEE_PERIOD() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_WITHDRAW_FEE_PERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_DEPOSIT_AMOUNT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_DEPOSIT_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_LOCK_DURATION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_LOCK_DURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> MIN_WITHDRAW_AMOUNT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MIN_WITHDRAW_AMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PRECISION_FACTOR() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRECISION_FACTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> PRECISION_FACTOR_SHARE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PRECISION_FACTOR_SHARE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> UNLOCK_FREE_DURATION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNLOCK_FREE_DURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> VCake() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VCAKE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> admin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> available() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AVAILABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> boostContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BOOSTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> cakePoolPID() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CAKEPOOLPID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> calculateOverdueFee(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CALCULATEOVERDUEFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> calculatePerformanceFee(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CALCULATEPERFORMANCEFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> calculateTotalPendingCakeRewards() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CALCULATETOTALPENDINGCAKEREWARDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> calculateWithdrawFee(String _user, BigInteger _shares) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CALCULATEWITHDRAWFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.generated.Uint256(_shares)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger _amount, BigInteger _lockDuration) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Uint256(_lockDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> freeOverdueFeeUsers(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FREEOVERDUEFEEUSERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> freePerformanceFeeUsers(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FREEPERFORMANCEFEEUSERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> freeWithdrawFeeUsers(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FREEWITHDRAWFEEUSERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getPricePerFullShare() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICEPERFULLSHARE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> inCaseTokensGetStuck(String _token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCASETOKENSGETSTUCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> init(String dummyToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, dummyToken)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> masterchefV2() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MASTERCHEFV2, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> operator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPERATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> overdueFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OVERDUEFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> performanceFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PERFORMANCEFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> performanceFeeContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PERFORMANCEFEECONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAdmin(String _admin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _admin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBoostContract(String _boostContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBOOSTCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _boostContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBoostWeight(BigInteger _boostWeight) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBOOSTWEIGHT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_boostWeight)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDurationFactor(BigInteger _durationFactor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDURATIONFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_durationFactor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDurationFactorOverdue(BigInteger _durationFactorOverdue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDURATIONFACTOROVERDUE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_durationFactorOverdue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFreePerformanceFeeUser(String _user, Boolean _free) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFREEPERFORMANCEFEEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Bool(_free)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxLockDuration(BigInteger _maxLockDuration) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXLOCKDURATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_maxLockDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOperator(String _operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETOPERATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _operator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOverdueFee(BigInteger _overdueFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETOVERDUEFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_overdueFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOverdueFeeUser(String _user, Boolean _free) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETOVERDUEFEEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Bool(_free)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPerformanceFee(BigInteger _performanceFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPERFORMANCEFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_performanceFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPerformanceFeeContract(BigInteger _performanceFeeContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPERFORMANCEFEECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_performanceFeeContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTreasury(String _treasury) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTREASURY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _treasury)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUnlockFreeDuration(BigInteger _unlockFreeDuration) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUNLOCKFREEDURATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_unlockFreeDuration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVCakeContract(String _VCake) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVCAKECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _VCake)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWithdrawFee(BigInteger _withdrawFee) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWITHDRAWFEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_withdrawFee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWithdrawFeeContract(BigInteger _withdrawFeeContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWITHDRAWFEECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_withdrawFeeContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWithdrawFeePeriod(BigInteger _withdrawFeePeriod) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWITHDRAWFEEPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_withdrawFeePeriod)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWithdrawFeeUser(String _user, Boolean _free) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWITHDRAWFEEUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Bool(_free)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalBoostDebt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALBOOSTDEBT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalLockedAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALLOCKEDAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalShares() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSHARES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> treasury() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TREASURY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unlock(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>> userInfo(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, Boolean, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger _shares) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_shares)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawByAmount(BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWBYAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> withdrawFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WITHDRAWFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawFeeContract() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WITHDRAWFEECONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> withdrawFeePeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WITHDRAWFEEPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static CakePool load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CakePool(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CakePool load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CakePool(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CakePool load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CakePool(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CakePool load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CakePool(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CakePool> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _token, String _masterchefV2, String _admin, String _treasury, String _operator, BigInteger _pid) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.Address(160, _masterchefV2), 
                new org.web3j.abi.datatypes.Address(160, _admin), 
                new org.web3j.abi.datatypes.Address(160, _treasury), 
                new org.web3j.abi.datatypes.Address(160, _operator), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid)));
        return deployRemoteCall(CakePool.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CakePool> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _token, String _masterchefV2, String _admin, String _treasury, String _operator, BigInteger _pid) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.Address(160, _masterchefV2), 
                new org.web3j.abi.datatypes.Address(160, _admin), 
                new org.web3j.abi.datatypes.Address(160, _treasury), 
                new org.web3j.abi.datatypes.Address(160, _operator), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid)));
        return deployRemoteCall(CakePool.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CakePool> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _token, String _masterchefV2, String _admin, String _treasury, String _operator, BigInteger _pid) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.Address(160, _masterchefV2), 
                new org.web3j.abi.datatypes.Address(160, _admin), 
                new org.web3j.abi.datatypes.Address(160, _treasury), 
                new org.web3j.abi.datatypes.Address(160, _operator), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid)));
        return deployRemoteCall(CakePool.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CakePool> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _token, String _masterchefV2, String _admin, String _treasury, String _operator, BigInteger _pid) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.Address(160, _masterchefV2), 
                new org.web3j.abi.datatypes.Address(160, _admin), 
                new org.web3j.abi.datatypes.Address(160, _treasury), 
                new org.web3j.abi.datatypes.Address(160, _operator), 
                new org.web3j.abi.datatypes.generated.Uint256(_pid)));
        return deployRemoteCall(CakePool.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger amount;

        public BigInteger shares;

        public BigInteger duration;

        public BigInteger lastDepositedTime;
    }

    public static class FreeFeeUserEventResponse extends BaseEventResponse {
        public String user;

        public Boolean free;
    }

    public static class HarvestEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger amount;
    }

    public static class InitEventResponse extends BaseEventResponse {
    }

    public static class LockEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger lockedAmount;

        public BigInteger shares;

        public BigInteger lockedDuration;

        public BigInteger blockTimestamp;
    }

    public static class NewAdminEventResponse extends BaseEventResponse {
        public String admin;
    }

    public static class NewBoostContractEventResponse extends BaseEventResponse {
        public String boostContract;
    }

    public static class NewBoostWeightEventResponse extends BaseEventResponse {
        public BigInteger boostWeight;
    }

    public static class NewDurationFactorEventResponse extends BaseEventResponse {
        public BigInteger durationFactor;
    }

    public static class NewDurationFactorOverdueEventResponse extends BaseEventResponse {
        public BigInteger durationFactorOverdue;
    }

    public static class NewMaxLockDurationEventResponse extends BaseEventResponse {
        public BigInteger maxLockDuration;
    }

    public static class NewOperatorEventResponse extends BaseEventResponse {
        public String operator;
    }

    public static class NewOverdueFeeEventResponse extends BaseEventResponse {
        public BigInteger overdueFee;
    }

    public static class NewPerformanceFeeEventResponse extends BaseEventResponse {
        public BigInteger performanceFee;
    }

    public static class NewPerformanceFeeContractEventResponse extends BaseEventResponse {
        public BigInteger performanceFeeContract;
    }

    public static class NewTreasuryEventResponse extends BaseEventResponse {
        public String treasury;
    }

    public static class NewUnlockFreeDurationEventResponse extends BaseEventResponse {
        public BigInteger unlockFreeDuration;
    }

    public static class NewVCakeContractEventResponse extends BaseEventResponse {
        public String VCake;
    }

    public static class NewWithdrawFeeEventResponse extends BaseEventResponse {
        public BigInteger withdrawFee;
    }

    public static class NewWithdrawFeeContractEventResponse extends BaseEventResponse {
        public BigInteger withdrawFeeContract;
    }

    public static class NewWithdrawFeePeriodEventResponse extends BaseEventResponse {
        public BigInteger withdrawFeePeriod;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PauseEventResponse extends BaseEventResponse {
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class UnlockEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger amount;

        public BigInteger blockTimestamp;
    }

    public static class UnpauseEventResponse extends BaseEventResponse {
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger amount;

        public BigInteger shares;
    }
}
